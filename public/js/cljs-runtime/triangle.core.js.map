{"version":3,"sources":["triangle/core.cljs"],"mappings":"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","names":["triangle.core/stage","reagent.core/adapt-react-class","js/module$node_modules$react_konva$lib$ReactKonva.Stage","triangle.core/layer","js/module$node_modules$react_konva$lib$ReactKonva.Layer","triangle.core/rect","js/module$node_modules$react_konva$lib$ReactKonva.Rect","triangle.core/line","js/module$node_modules$react_konva$lib$ReactKonva.Line","triangle.core/circle","js/module$node_modules$react_konva$lib$ReactKonva.Circle","triangle.core/group","js/module$node_modules$react_konva$lib$ReactKonva.Group","triangle.core/text","js/module$node_modules$react_konva$lib$ReactKonva.Text","triangle.core/window-width","js/window","triangle.core/window-height","triangle.core/init-vertex","p1__16979#","cljs.core.map","triangle.calc.add","triangle.core/state-vertex","reagent.core.atom","cljs.core/zipmap","triangle.core/point-size","triangle.core/center-color-table","triangle.core/state-center","cljs.core/keys","cljs.core.repeat","triangle.core/get-xy","e","t","triangle.core/change-cursor","s","triangle.core/vertex","k","vec__16980","cljs.core.nth","x","y","G__16983","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","triangle.core/triangle","map__16986","cljs.core/--destructure-map","cljs.core.get","p1__16984#","p1__16985#","a","b","c","cljs.core/flatten","triangle.core/select-center","style","cljs.core.into","iter__5523__auto__","s__16988","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__16990","cljs.core/chunk-buffer","i__16989","vec__16991","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16987","cljs.core/chunk-rest","vec__16994","cljs.core/first","cljs.core/cons","cljs.core/rest","v","cljs.core/name","triangle.core/point","color","triangle.core/show?","map__16997","and__5043__auto__","triangle.calc/triangle?","G__16998","triangle.core/circumcenter","map__16999","map__17000","vec__17001","p","r","triangle.calc/circumcenter-data","triangle.core/incenter","map__17004","map__17005","vec__17006","triangle.calc/incenter-data","triangle.core/centroid","map__17009","vec__17010","triangle.calc.mul","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","triangle.core/ray","p__17016","map__17017","seq17013","G__17014","cljs.core/next","G__17015","self__5754__auto__","start","dir","half?","start1","triangle.calc.sub","end","triangle.core/orthocenter","map__17018","map__17019","vec__17020","rays","triangle.calc/orthocenter-data","s__17024","b__17026","i__17025","map__17027","iter__17023","map__17028","triangle.core.ray","triangle.core/canvas","triangle.core/main","js/triangle","js/triangle.core","js/triangle.core.root","triangle.core/root","js/module$node_modules$react_dom$client.createRoot","js/document.getElementById","triangle.core/render-main","reagent.core.create_class","triangle.core/init","reagent.core.as_element","cljs.core/chunk-first"],"sourcesContent":["(ns triangle.core\n  (:require  [reagent.core :as r]\n             [reagent.dom :as rdom]\n             [medley.core :as med]\n             [goog.string :refer [format]]\n             [\"react-dom/client\" :refer [createRoot]]\n             [\"react-konva\" :as konva :refer [Stage Layer Rect Line Circle Group Text]]\n             [triangle.calc :as calc]))\n\n(def stage (r/adapt-react-class Stage))\n\n(def layer (r/adapt-react-class Layer))\n\n(def rect (r/adapt-react-class Rect))\n\n(def line (r/adapt-react-class Line))\n\n(def circle (r/adapt-react-class Circle))\n\n(def group (r/adapt-react-class Group))\n\n(def text (r/adapt-react-class Text))\n\n(defn- window-width [] (. js/window -innerWidth))\n\n(defn- window-height [] (. js/window -innerHeight))\n\n(def init-vertex (map #(calc/add % [200 200]) [[0 0] [200 0] [100 -100]]))\n\n(def state-vertex (r/atom (zipmap [:a :b :c] init-vertex)))\n\n(def point-size 7)\n\n(def center-color-table {:circumcenter \"orange\"\n                         :incenter \"blue\"\n                         :orthocenter \"gray\"\n                         :centroid \"red\"})\n\n(def state-center (r/atom (zipmap (keys center-color-table) (repeat false))))\n\n(defn get-xy [e]\n  (let [t (. e -target)]\n    [(. t x) (. t y)]))\n\n(defn- change-cursor [e s]\n  (set!  (.. e -target getStage container -style -cursor) s))\n\n(defn vertex [k]\n  (let [[x y] (k @state-vertex)]\n    [circle {:x x :y y :stroke \"black\" :radius point-size\n             :on-mouse-enter (fn [e] (.. e -target (fill \"black\")))\n             :on-mouse-out (fn [e] (.. e -target (fill nil)))\n             :draggable true\n             :on-drag-move (fn [e]\n                             (swap! state-vertex assoc k (get-xy e)))}]))\n\n;; I still don't figure out how to drag the triangle so that\n;; it moves the vertices properly.\n\n(defn triangle []\n  (let  [{:keys [a b c]} @state-vertex]\n    [group\n     {:draggable true}\n     [line {:points (flatten [a b c])\n            :closed true\n            :on-mouse-enter #(change-cursor % \"pointer\")\n            :on-mouse-out #(change-cursor % nil)\n            :stroke \"black\"}]\n     [vertex :a]\n     [vertex :b]\n     [vertex :c]]))\n\n(defn select-center []\n  (let [style (fn [k] {:text-decoration \"underline\"\n                       :text-decoration-thickness 3\n                       :text-decoration-color (k center-color-table)})]\n    [:fieldset\n     {:style {:display \"flex\"\n              :height 120}}\n     [:legend \"Select\"]\n     [:table\n      (into [:tbody]\n            (for [[k v] center-color-table]\n              [:tr [:td {:style (style k) } (name k)]\n               [:td [:input {:type \"checkbox\"\n                             :on-change (fn [e]\n                                          (let [t (.. e -target -checked)]\n                                            (swap! state-center assoc k t)))}]]]))]]))\n\n(defn point [x y color]\n  [circle {:x x :y y :fill color :radius point-size}])\n\n(defn show?\n  \"Should we display this center? It also checks\n  if the three points makes a triangle and returns false\n  if they don't.\"\n  [k]\n  (let [{:keys [a b c]} @state-vertex]\n    (and (calc/triangle? a b c)\n         (k @state-center))))\n\n(defn circumcenter []\n  (when (show? :circumcenter )\n    (let [{:keys [a b c]} @state-vertex\n          {:keys [p r]} (calc/circumcenter-data a b c)\n          [x y] p\n          color (:circumcenter center-color-table)]\n      [group\n       [point x y color]\n       [circle {:x x :y y :radius r :stroke color}]])))\n\n(defn incenter []\n  (when (show? :incenter)\n    (let [{:keys [a b c]} @state-vertex\n          {:keys [p r]} (calc/incenter-data a b c)\n          [x y] p\n          color (:incenter center-color-table)]\n      [group\n       [point x y color]\n       [circle {:x x :y y :radius r :stroke color}]])))\n\n(defn centroid []\n  (when (show? :centroid)\n    (let [{:keys [a b c]} @state-vertex\n          [x y] (calc/mul (/ 1 3) (calc/add a b c))\n          color (:centroid center-color-table)]\n      [point x y color])))\n\n(defn ray [start dir &{:keys [color half?]\n                       :or {color \"black\"\n                            half? false}}]\n  (let [r (+ (window-width) (window-height))\n        v (calc/mul r dir)\n        start1 (if half? start (calc/sub start v))\n        end (calc/add start v)]\n    [line {:points (flatten [start1 end])\n           :stroke color\n           :dash [5 5]}]))\n\n(defn orthocenter []\n  (when (show? :orthocenter)\n    (let [{:keys [a b c]} @state-vertex\n          {:keys [p rays]} (calc/orthocenter-data a b c)\n          [x y] p\n          color (:orthocenter center-color-table)]\n      (into [group [point x y color]]\n            (for [{:keys [start dir]} rays] (ray start dir :color color))))))\n\n(defn canvas []\n  [stage {:width (window-width)\n          :height (window-height)}\n   [layer\n    ;; the latter shapes are displayed in front of the former ones.\n    [circumcenter]\n    [incenter]\n    [centroid]\n    [orthocenter]\n    [triangle]\n    ]])\n\n(defn main []\n  [:div\n   [:h2 \"The four triangle centers\"]\n   [:div {:style {:display \"flex\"\n                  :width (window-width)\n                  :height (window-height)\n                  :flex-direction \"row\"}}\n    [select-center]\n    [canvas]]])\n\n;;;;;;;;;;;;;;;;;\n;; render main ;;\n;;;;;;;;;;;;;;;;;\n\n(defonce root (createRoot (js/document.getElementById \"root\")))\n\n(defn render-main []\n  (r/create-class\n   {:component-name \"my-main\"\n    :reagent-render main}))\n\n(defn init []  (.render root (r/as-element [render-main])))\n\n(init)\n"]}